CURSO PROFESIONAL DE CSS GRID LAYOUT

4 TIPS PARA LLEVAR NUESTROS CONOCIMIENTOS DE CSS A OTRO NIVEL
Tip 1: No es necesario memorizar todas las propiedades y valores, lo importante es practicar.

Tip 2: Conoce los conceptos fundamentales de css: Esto es un tema amplio, lo importante es conocer los conceptos fundamentales de css como: layout, selectores, responsive, flujo normal, modelo de caja, herencia y cascada, Formatting Contexts.

Tip 3: Usar DevTools para encontrar errores y hacer pruebas rápidas, lo importante es ir al devtools y inspeccionar y buscar el error.

Tip 4: Saber qué herramientas te sirven para aprender y que herramientas nos te sirven para aprender, los resumenes nos son una buena forma de aprender, la mejor manera es hacer cursos, leer libros, leer documentación oficial.

¿CÓMO FUE PENSADO CSS CUANDO SE CREÓ?
Tim Berners Lee creó WWW y HTML en 1991: (el tenía un hoja de estilos NO CSS, pero no quería compartirlo ya que pensaba que un feature así tenia que ser NATIVO).

1993 NAVEGADOR VIOLA
Tenía su propio lenguaje de estilos, quería convertir su lenguaje en un estándar para la web

1994 NAVEGADOR NCSA MOSAIC (hizo popular la web)
Tenía a Marc Andreessen como co-creador, les dijo a los desarrolladores que no había forma de trabajar con algo así(CSS). -håkon wium lie: sacó una propuesta para algo así CHSS.
Se dió a la luz presentando dicha propuesta inicial. debatiendo si cualquier usuario pudiera manipular los estilos.

1995 HAKON Y BERT BOSS
se unen y responder al 1er borrador en la conf de WWW en 1995.(algó que término siendo muy importante fue que sacarón la "H" y término siendo CSS)
Se siguió debatiendo el control del usuario sobre los estílos, esta idea término siendo rechazada.

W3C: saca una junta, ya que era de su interés

1996 NACE CSS
Nace como recomendación de W3C.

PRIMEROS NAVEGADORES COMPATIBLES CON CSS
IE3 (INTERNET EXPLORER)
NETSCAPE
OPERA

LIMITACIONES DE CSS Y EL PROBLEMA DE LOS ELEMENTOS FLOTANTES
Los primeros diseños de CSS eran una mezcla entre elementos flotantes y posicionados

- Haciendo que se tengan limitaciones de control
- Provocando que la información no se vea uniforme

- Existía una frustración por la falta de columnas de altura completa
    - Para solucionarlo se creó una técnica de COLUMNAS FALSAS
- Se empieza hablar de Diseño Responsivo
    - Ethan Marcotte ⇒ Tecnica de diseño responsivo

- Se empieza a trabajar con elementos flotantes
    - El problema está que solo funciona cuando se calcula con precisión el ancho y si el contenido tiene la misma altura
    - La solución fue que se comenzó a trabajar con columnas a través de contenedores para cada una y no con elementos independientes
    - Tambien se comienza a usar display: table que también se pueden utilizar para elementos que no son elementos de tablas

- Existen una gran cantidad de técnicas que son simplemente trucos
    - Por ello CSS se ha visto difícil y frágil porque no había herramientas de diseño

**RESUMEN:** En el principio usar CSS implicaba usar trucos, comenzando desde las columnas, columnas de tamaño completo, el diseño responsivo, etc. Era de esta manera debido a que no se tenían muchas herramientas

HERRAMIENTAS QUE NOS HAN FACILITADO EL CAMINO
Algunas de las herramientas principales son:

**Arquitecturas**

Es la estandarización de como nombramos a nuestras clases en CSS y elegir que método de arquitectura usaremos.

**Pre y Post Procesadores**

Son bastante importantes los preprocesadores por que nos permite trabajar mas rápido al momento de crear código y los postprocesadores nos permite agregar pequeños prefijos independientemente el navegador en el que estemos trabajando. Se deben tener en cuenta que prefijos no son siempre necesarios.

**Diseño de componentes (como Atomic Design)**

Es unas tecnica que utilizamos para el desarrollo de vistas en general.

**Frameworks**

Los frameworks de CSS ha permitido que la mayoría de las webs tengan un similitud en cuanto apariencia, pero esto es compensado por la velocidad y facilidad de su uso, a tal punto que una persona con pocos conocimientos de CSS logre crear vistas fantásticas.
Se caracteriza por tener unos lineamientos que lo hace poco personalizable. Es importante cuestionarnos si necesitamos o no un framework.

**Performance**

Es tener es ser consientes del rendimiento de nuestra web.

**Accesibilidad**

Es adoptar nuestra web para aquellas personas son alguna limitación física.

**Evergreen Browsers**

Nos habla de la compatibilidad de nuestro código con los navegadores.
Debemos aumentar nuestra compresión del por que suceden las cosas y saber que necesitamos para desarrollar.

¿CSS GRID ES UNA IDEA NUEVA? LA EVOLUCIÓN DE LA ESPECIFICACIÓN

Css Grid ya estaba en la mente de los desarrolladores desde hace mucho tiempo. 

- Cuando comenzaron en CSS pensaron tomar un diseño similar a las revistas
    - Las imágenes, textos, pie de páginas tenían ciertos lugares
    - Todo el documento tenía un sentido
- Se tenía la idea de un sistema de layout
- Microsoft necesitaba urgentemente una herramienta de diseño robusto y flexible para la web si la web iba a ser una opción para el desarrollo de aplicaciones nativas en windows
- Hubo 3 ideas fundamentales
    1. Idea de Microsoft
    2. Diseño avanzado de Bos
    3. Adición de líneas de cuadricula de Linss
- Antes de que una recomendación candidata (Borrador Final) pueda convertirse en una recomendación propuesta, la W3C necesita ver al menos dos implementaciones independiendientes e interoperables
- Hubo un cambio fundamental con CSS Grid
    - **[Jen Simmons](https://labs.jensimmons.com/)** ⇒ Colocó muchas demostraciones que creó para CSS Grid en la web

¿QUÉ SIGNIFICA GRID PARA CSS?

CSS Grid requiere una forma completamente nueva de pensar sobre el diseño en CSS. Algunos autores han dejado diferentes conceptos:

**BERT BOS**

"No se trata simplemente de agregar propiedades a cada elemento individual. Ahora puedes tener un modelo diferente en el que comienzas con tu diseño primero y luego incorporas los diferentes elementos en ese diseño"

**ATKINS**

"Es la herramienta de diseño más poderosa que hemos inventado hasta ahora para CSS"

**ETEMAD**

"CSS Grid toma todas esas cosas complicadas que tuvimos que hacer para lograr diseños básicos y lo hace completamente innecesario"

**WHITWORTH**

"Estoy entusiasmado con el futuro del diseño CSS", "CSS Grid no es el final; en realidad es solo el comienzo"

TÉCNICAS DE ALINEAMIENTO ANTES DE CSS GRID: MARGIN Y LINE-HEIGHT

Tecnica de Margin

Propiedades que necesitamos
margin-top: 10px;
margin-right: 15px;
margin-bottom: 20px;
margin-left: 25px;
--margin corto--
margin: 10px 15px 20px 25px;

Técnica line-height

Propiedades que necesitamos
++Text Align++

Nos permite alinear textos de forma horizontal
++Vertical Align++

Nos permite alinear textos de forma vertical
++Line Height++

TÉCNICAS DE ALINEAMIENTO ANTES DE CSS GRID: TABLE-CELL Y POSITIONS
Table-Cell
Positions
Es importante conocer las propiedades que tienen estas técnicas para poder posicionar bien.

En la técnica de Table-Cell tenemos las propiedades de

display: table-cell — Hace que cualquier elemento se comporte como una tabla.
text-align — Estos últimos dos, los vimos en la clase anterior.
vertical-align
La ultima tecnica a ver es la de Positions, que tiene las siguientes propiedades:

position: relative
position: absolute
top
right
bottom
left
transform: translate ()
Hay una tabla que coincide con todos los valores de positions, debido a eso podemos ver sus características dependiendo de su valor. Esto tiene una sintaxis donde va primero

Top: Longitud, Porcentaje, Valor por Defecto, Hereda Del Padre
Transform: none, transform-functions, ,initial, inherit
Transform: translate(x.y)

TÉCNICAS DE ALINEAMIENTO DE CSS GRID: PROS Y CONTRAS

Las propiedades anteriores son de css 2, sin embargo no vimos propiedades especificas para alinear elementos de bloque en cc2. Todo lo que vimos solo son trucos, sin embargo hoy en dia muchas personas lo usan.

MARGIN
Ventajas: El valor auto alinea horizontalmente cualquier elemento con cualquier ancho.
Desventajas: Alinear verticalmente, ya que, en cada caso, deberán calcularse estos valores.

LINE-HEIGHT
Ventajas: correcta alineación.
Desventajas: si el texto ocupa más de una linea el elemento toma un alto más grande de lo necesario para los cálculos.

TABLE-CELL
Ventajas: La alineación vertical no esta condicionada por fuentes, tamaños de fuentes o alturas de linea.
Desventajas: vertical-align sólo se aplica a elementos inline.

La mayor limitante de todas ellas es que contienen muchas propiedades físicas:
margin-top
padding-bottom
border-right
left

MODOS DE ESCRITURA Y EJES DE ALINEAMIENTO + RETO

La propiedad writing-mode define si los renglones de texto se disponen horizontal o verticalmente y la dirección en que avanzan los bloques.
horizontal-tb El contenido fluye horizontalmente de izquierda a derecha y verticalmente de arriba hacia abajo. El próximo renglón horizontal se posiciona debajo del renglón anterior.

vertical-rl El contenido fluye verticalmente de arriba hacia abajo y horizontalmente de derecha a izquierda. El próximo renglón vertical se posiciona a la izquierda del renglón anterior.

vertical-lr El contenido fluye verticalmente de arriba hacia abajo y horizontalmente de izquierda a derecha. El próximo renglón vertical se posiciona a la derecha del renglón anterior.

sideways-rl El contenido fluye verticalmente de arriba hacia abajo y todos los glifos, incluidos aquellos de los sistemas de escritura verticales, se colocan de lado hacia la derecha.

sideways-lr El contenido fluye verticalmente de arriba hacia abajo y todos los glifos, incluidos aquellos de los sistemas de escritura verticales, se colocan de lado hacia la izquierda.

Cosas a tener en cuenta a la hora de usar writing mode:
El modo de escritura. -La dirección. -La orientación del texto.
Para esto hay que ver los elementos bloque y elementos en linea.

display-block: (horizontal)

Ocupan todo el espacio de su elemento padre (contenedor). -Fuerzan un salto de línea (ocupan todo el ancho disponible). -Respetan el width, el height, el margin-top y el margin-bottom indicados por el usuario. -Algunos son: div, p, h1, h2, h3, h4, h5, h6, hr, ol, ul, table, li.
display-inline: (vertical) -Son apilables. -No tienen ni margin-top ni margin-bottom (por mucho que se lo indiques en el CSS). -Si tienen margin-left y margin-right. No respetan ni width ni height. -Estas medidas dependerán del tamaño en píxels de su contenido. -Algunos son: a, span, label, strong, br, input, textarea, abbr,

PROPIEDADES FÍSICAS Y LÓGICAS EN CSS + QUIZ

MODELOS DE CAJA (Físicas - Lógicas)
++Propiedades físicas++
MARGIN: margin-top | Margin-left | Margin-right | Margin-bottom

PADDING: padding-top | paddding-left | padding-right | padding-bottom

BORDER (-size-style-color): border-top | border-left | border-right | border-bottom

POSITIONS top | left | right | bottom.

++- Propiedades Lógicas++
MARGIN: Margin-block-start | Margin-inline-start | Margin-inline-end | Margin-block-end

PADDING padding-block-start | paddding-inline-start | padding-inline-end | padding-block-end

BORDER(-size-style-color): border-block-start | border-inline-start | border-inline-end | border-block-end.

POSITIONS: inset-block-start | inset-inline-start | inset-inline-end | inset-block-end


Las propiedades que tenemos que tener en cuenta para el alineamiento son estas 3:

TÉCNICAS DE ALINEAMIENTO CON FLEXBOX
Display: Flex
Justify-content: Es para los elementos en su alineación horizontal
align-items: Es para alinear los elementos de forma vertical.

DIBUJEMOS CON CSS + RETO

Una de las mejores páginas para entender css es [a single div](https://a.singlediv.com/) que tiene muchos dibujos hechos con un solo div.
Una herramienta muy buena para usar los porcentajes del border radius es [Fancy-Border-Radius](https://9elements.github.io/fancy-border-radius/#48.49.50.0--.), que tiene su versión básica de 4 puntos y su versión [Full Control](https://9elements.github.io/fancy-border-radius/full-control.html) que tiene 8 puntos.

GRID Y LAS RELACIONES PADRE E HIJOS INMEDIATOS
Ideas/conceptos claves
CSS Grid se puede utilizar para lograr muchos diseños diferentes. También se destaca por permitir dividir una página en áreas o regiones principales, por definir la relación en términos de tamaño, posición y capas entre partes de un control construido a partir de primitivas HTML.

Grid nos permite crear rejillas que tenga filas y columnas
En este momento se tiene una mayor complejidad en el diseño web

Siempre se tendrá un Contenedor (padre)
Los items (elementos hijos) serán los que estarán dentro de este contenedor
Los hijos también pueden ser padres
Todos los padres tienen que tener:

display: grid;
RESUMEN: Usar CSS Grid consiste en tener un elemento padre el cual se definirá la propiedad display grid, sus elementos hijos serán afectados por esta regla, siendo posicionados según la forma establecida la grilla.

LINES, TRACKS, CELL, AREA, GUTTERS, GRID AXIS, GRID ROW, GRID COLUMN

LINE son las líneas divisorias que componen la estructura de la cuadrícula. Pueden ser verticales (“líneas de cuadrícula de columna”) u horizontales (“líneas de cuadrícula de fila”) y residir a ambos lados de una fila o columna.

TRACK es prácticamente varias celdas adyacentes o juntas en una fila o columna, como también pueden ser 3, 2 o las celdas adyacentes que se necesita.

AREA El espacio total rodeado por cuatro líneas de cuadrícula. Un área de cuadrícula puede estar compuesta por cualquier número de celdas de cuadrícula. Esta propiedad también se puede utilizar para asignar un nombre a un elemento de la cuadrícula.

CELL son cada cuadro de la grilla, como lo son en una tabla, como la de excel.

Grid row cuando pensamos en grid row vamos a pensar de forma vertical y empezamos a contar desde la linea 1 a la linea 6 (arriba a abajo)

Grid column cuando pensamos en grid column vamos a pensar de forma horizontal y empezamos a contar de la línea 1 a la línea 6 (izquierda a derecha)

axis es la alineación del contenido dentro o items o celdas de nuestra grid

-row axis este eje es de forma horizontal o también lo podemos conocer como inline axis

-column axis este eje es de forma vertical también lo conoces como block-axis

¡INICIEMOS NUESTRO PROYECTO! FASE DE CREATIVIDAD E IDENTIFICACIÓN DE ELEMENTOS
Inspiracion:

Pinterest
Dribabble
Asymetrical Grid design

Hacer una lista de todo lo que se necesita

    Tematica
        Lluvia de ideas
    Figuras principales
        Lluvia de ideas: Circulos, cuadros, overlap
    Imagenes
        De uso libre
            Pixabay
            Pexels
            Freepick
    Tipografia
        Google Fonts
    Paleta de colores
        ColorHunt
        Picker
Hacer un bosquejo y plasmar las ideas